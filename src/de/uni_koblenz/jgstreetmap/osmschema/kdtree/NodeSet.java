/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgstreetmap.osmschema.kdtree;

import java.util.LinkedList;

import de.uni_koblenz.jgralab.EdgeDirection;
import de.uni_koblenz.jgralab.Graph;
import de.uni_koblenz.jgstreetmap.osmschema.Node;
import de.uni_koblenz.jgstreetmap.osmschema.OsmSchema;

public interface NodeSet extends de.uni_koblenz.jgralab.Vertex {

	/**
	 * @return the next de.uni_koblenz.jgstreetmap.osmschema.kdtree.NodeSet vertex in the global vertex sequence
	 */
	public de.uni_koblenz.jgstreetmap.osmschema.kdtree.NodeSet getNextNodeSet();

	public LinkedList<Node> getNodeSet();
	
	public void setNodeSet(LinkedList<Node> set);
	
	public void add2NodeSet(Node n);
	
	/**
	 * @return the first edge of class NodeSet at this vertex
	 */
	public de.uni_koblenz.jgstreetmap.osmschema.kdtree.HasSet getFirstHasSet();

	/**
	 * @return the first edge of class NodeSet at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.jgstreetmap.osmschema.kdtree.HasSet getFirstHasSet(EdgeDirection orientation);

	/**
	 * @return the first edge of class NodeSet at this vertex
	 */
	public de.uni_koblenz.jgstreetmap.osmschema.HasElement getFirstHasElement();

	/**
	 * @return the first edge of class NodeSet at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.jgstreetmap.osmschema.HasElement getFirstHasElement(EdgeDirection orientation);

	/**
	 * @return a List of all Node vertices related to this by a <code>element</code> link.
	 */
	public java.util.List<? extends de.uni_koblenz.jgstreetmap.osmschema.Node> getElementList();

	/**
	 * adds the given vertex as <code>Element</code> to this vertex, i.e. creates an
	 * <code>de.uni_koblenz.jgstreetmap.osmschema.HasElement</code> edge from this vertex to the given 
	 * one and returns the created edge.
	 * @return  a newly created edge of type <code>de.uni_koblenz.jgstreetmap.osmschema.HasElement</code>
	 *          between this vertex and the given one.
	 */
	public de.uni_koblenz.jgstreetmap.osmschema.HasElement addElement(de.uni_koblenz.jgstreetmap.osmschema.Node vertex);

	/**
	 * removes the given vertex as <code>Element</code> from this vertex, i.e.  * deletes the <code>de.uni_koblenz.jgstreetmap.osmschema.HasElement</code> edge connection this vertex with 
	 * the given one. The given vertex is only deleted if the edge is a composition
	 * which implies a existential dependency between the composition and the child vertex
	 */
	public void removeElement(de.uni_koblenz.jgstreetmap.osmschema.Node vertex);

	/**
	 * @return a List of all Key vertices related to this by a <code>key</code> link.
	 */
	public java.util.List<? extends de.uni_koblenz.jgstreetmap.osmschema.kdtree.Key> getKeyList();

	/**
	 * adds the given vertex as <code>Key</code> to this vertex, i.e. creates an
	 * <code>de.uni_koblenz.jgstreetmap.osmschema.kdtree.HasSet</code> edge from this vertex to the given 
	 * one and returns the created edge.
	 * @return  a newly created edge of type <code>de.uni_koblenz.jgstreetmap.osmschema.kdtree.HasSet</code>
	 *          between this vertex and the given one.
	 */
	public de.uni_koblenz.jgstreetmap.osmschema.kdtree.HasSet addKey(de.uni_koblenz.jgstreetmap.osmschema.kdtree.Key vertex);

	/**
	 * removes the given vertex as <code>Key</code> from this vertex, i.e.  * deletes the <code>de.uni_koblenz.jgstreetmap.osmschema.kdtree.HasSet</code> edge connection this vertex with 
	 * the given one. The given vertex is only deleted if the edge is a composition
	 * which implies a existential dependency between the composition and the child vertex
	 */
	public void removeKey(de.uni_koblenz.jgstreetmap.osmschema.kdtree.Key vertex);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type HasSet or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgstreetmap.osmschema.kdtree.HasSet> getHasSetIncidences();
	
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type HasSet.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_koblenz.jgstreetmap.osmschema.kdtree.HasSet> getHasSetIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type HasElement or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgstreetmap.osmschema.HasElement> getHasElementIncidences();
	
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type HasElement.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_koblenz.jgstreetmap.osmschema.HasElement> getHasElementIncidences(EdgeDirection direction);

}
